{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "../src/",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "bcrypt = require 'bcrypt-nodejs'\r\ncrypto = require 'crypto'\r\n\r\nmodule.exports = (config) ->\r\n  (rs) ->\r\n    config = config or {}\r\n    algorithm = config.algorithm or rs.config.algorithm or 'aes-256-ctr'\r\n    encryptionKey = Buffer.alloc 32\r\n    iv = Buffer.alloc 16, 0\r\n    encryptionKey = Buffer.concat [Buffer.from(config.encryptionKey or rs.config.encryptionKey)], encryptionKey.length\r\n    radix = config.radix or 23\r\n    encrypt = (text) ->\r\n      cipher = crypto.createCipheriv algorithm, encryptionKey, iv\r\n      encrypted = cipher.update text, 'utf8', 'hex'\r\n      encrypted += cipher.final 'hex'\r\n      encrypted\r\n    decrypt = (text) ->\r\n      decipher = crypto.createDecipheriv algorithm, encryptionKey, iv\r\n      decrypted = decipher.update text, 'hex', 'utf8'\r\n      decrypted += decipher.final 'utf8'\r\n      decrypted\r\n    hashPassword = (password) ->\r\n      bcrypt.hashSync password, bcrypt.genSaltSync(8), null\r\n    checkHash = (password, hash) ->\r\n      bcrypt.compareSync password, hash\r\n    generateToken = (userId, expiresHours) ->\r\n      expiryDate = new Date(new Date().valueOf() + expiresHours * 60 * 60 * 1000)\r\n      expires = (expiryDate.valueOf() - new Date(2019,0,1).valueOf()).toString(radix)\r\n      rawToken = userId + ':' + expires\r\n      encrypt rawToken\r\n    parseToken = (token) ->\r\n      if token\r\n        rawToken = decrypt token\r\n        [userId, expires] = rawToken.split ':'\r\n        expiryDate = new Date(parseInt(expires, radix) + new Date(2019,0,1).valueOf())\r\n        if expiryDate > new Date()\r\n          return userId\r\n      null \r\n    rs.token =\r\n      encrypt: encrypt\r\n      decrypt: decrypt\r\n      hashPassword: hashPassword\r\n      checkHash: checkHash\r\n      generateToken: generateToken\r\n      parseToken: parseToken"
  ]
}